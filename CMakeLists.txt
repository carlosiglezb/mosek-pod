cmake_minimum_required(VERSION 3.5)
project(mosek VERSION 10.1.26 LANGUAGES C)
## https://download.mosek.com/stable/10.1.26/mosektoolslinux64x86.tar.bz2

# set (PROJECT_VERSION_MAJOR 10.1.26)
if(CMAKE_VERSION VERSION_LESS 3.7)
  list(INSERT CMAKE_MODULE_PATH 0
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/3.7"
  )
endif()

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE Release CACHE STRING
    "Choose the type of build; options are Debug Release RelWithDebInfo MinSizeRel"
    FORCE
  )
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
    STRINGS
      Debug
      Release
      RelWithDebInfo
      MinSizeRel
  )
endif()

include(CMakePackageConfigHelpers)
include(CTest)
include(GNUInstallDirs)

if(NOT MOSEK_PLATFORM)
  if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
      message(FATAL_ERROR "MOSEK is NOT available for the osx32x86 platform")
    else()
      set(MOSEK_PLATFORM osx64x86)
    endif()
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
      set(MOSEK_PLATFORM linux32x86)
    else()
      set(MOSEK_PLATFORM linux64x86)
    endif()
  elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
      set(MOSEK_PLATFORM win32x86)
    else()
      set(MOSEK_PLATFORM win64x86)
    endif()
  else()
    message(FATAL_ERROR "MOSEK is NOT available for this platform")
  endif()
endif()

set(MOSEK_PLATFORM "${MOSEK_PLATFORM}" CACHE STRING
  "Choose the MOSEK platform; options are linux32x86 linux64x86 osx64x86 win32x86 win64x86"
)
set_property(CACHE MOSEK_PLATFORM PROPERTY
  STRINGS
    linux32x86
    linux64x86
    osx64x86
    win32x86
    win64x86
)


if(MOSEK_PLATFORM STREQUAL "osx64x86")
  set(MOSEK_ARCHIVE_SUFFIX .tar.bz2)
  set(MOSEK_ARCHIVE_EXPECTED_SHA256 84c29c47457c2e267a762be7554f0abe6b4817fee829f063faf5900862aca222)
elseif(MOSEK_PLATFORM MATCHES "^linux")
  set(MOSEK_ARCHIVE_SUFFIX .tar.bz2)

  if(MOSEK_PLATFORM STREQUAL "linux64x86")
    set(MOSEK_ARCHIVE_EXPECTED_SHA256
      cde3bdd29b34e5ebdfbf302c35a7b88c6197e747a90f7027e40277f4bd8662f4
    )
  else()
    set(MOSEK_ARCHIVE_EXPECTED_SHA256
      b2c8cbc223f008970b75f84ca59ac61f7346be27d691cc197c4d07a34d1ecd89
    )
  endif()
elseif(MOSEK_PLATFORM MATCHES "^win")
  set(MOSEK_ARCHIVE_SUFFIX .zip)

  if(MOSEK_PLATFORM STREQUAL "win32x86")
    set(MOSEK_ARCHIVE_EXPECTED_SHA256
     3d3c548077dcee5287a000b2333895da1dac0911026fb8997d2b24db6e23a796
    )
  else()
    set(MOSEK_ARCHIVE_EXPECTED_SHA256
     71e5488570db618d84aed190e29a3eceded4f10a1c3194e3c4bfed59e5366288
    )
  endif()
else()
  message(FATAL_ERROR "MOSEK is NOT available for this platform")
endif()

set(MOSEK_ARCHIVE
  "${CMAKE_CURRENT_BINARY_DIR}/mosektools${MOSEK_PLATFORM}${MOSEK_ARCHIVE_SUFFIX}"
)



if(EXISTS "${MOSEK_ARCHIVE}")
  file(SHA256 "${MOSEK_ARCHIVE}" MOSEK_ARCHIVE_ACTUAL_SHA256)

  if(NOT MOSEK_ARCHIVE_ACTUAL_SHA256 STREQUAL MOSEK_ARCHIVE_EXPECTED_SHA256)
    file(REMOVE "${MOSEK_ARCHIVE}")
  endif()
endif()



if(NOT EXISTS "${MOSEK_ARCHIVE}")
  set(MOSEK_ARCHIVE_URL
    "http://download.mosek.com/stable/${PROJECT_VERSION}/mosektools${MOSEK_PLATFORM}${MOSEK_ARCHIVE_SUFFIX}"
  )

  message(STATUS "Downloading the MOSEK archive from ${MOSEK_ARCHIVE_URL}")

  file(DOWNLOAD "${MOSEK_ARCHIVE_URL}" "${MOSEK_ARCHIVE}"
    SHOW_PROGRESS
    STATUS MOSEK_DOWNLOAD_STATUS
    TIMEOUT 300
  )

  list(GET MOSEK_DOWNLOAD_STATUS 0 MOSEK_DOWNLOAD_RESULT)

  if(NOT MOSEK_DOWNLOAD_RESULT EQUAL 0)
    message(FATAL_ERROR "Could NOT extract MOSEK from archive")
  endif()

  file(SHA256 "${MOSEK_ARCHIVE}" MOSEK_ARCHIVE_ACTUAL_SHA256)

  if(NOT MOSEK_ARCHIVE_ACTUAL_SHA256 STREQUAL MOSEK_ARCHIVE_EXPECTED_SHA256)
    message("MOSEK_ARCHIVE_EXPECTED_SHA256 is ${MOSEK_ARCHIVE_EXPECTED_SHA256}")
    message(FATAL_ERROR "The MOSEK archive SHA256 hash does NOT match")
  endif()
endif()

set(MOSEK_ARCHIVE_DIR "${CMAKE_CURRENT_BINARY_DIR}/mosek")

if(EXISTS "${MOSEK_ARCHIVE_DIR}")
  file(TIMESTAMP "${MOSEK_ARCHIVE}" MOSEK_ARCHIVE_TIMESTAMP %s)
  file(TIMESTAMP "${MOSEK_ARCHIVE_DIR}" MOSEK_ARCHIVE_DIR_TIMESTAMP %s)

  if(MOSEK_ARCHIVE_TIMESTAMP GREATER MOSEK_ARCHIVE_DIR_TIMESTAMP)
    file(REMOVE_RECURSE "${MOSEK_ARCHIVE_DIR}")
  endif()
 endif()

set(MOSEK_PLATFORM_DIR
  "${MOSEK_ARCHIVE_DIR}/${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}/tools/platform/${MOSEK_PLATFORM}")


message("MOSEK_PLATFORM_DIR  ${MOSEK_PLATFORM_DIR}")

if(NOT EXISTS "${MOSEK_ARCHIVE_DIR}")
  message(STATUS
    "Extracting MOSEK from the archive mosektools${MOSEK_PLATFORM}${MOSEK_ARCHIVE_SUFFIX}"
  )

  execute_process(COMMAND "${CMAKE_COMMAND}" -E tar xf "${MOSEK_ARCHIVE}"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
    TIMEOUT 300
    RESULT_VARIABLE MOSEK_EXTRACT_RESULT_VARIABLE
  )

  if(NOT MOSEK_EXTRACT_RESULT_VARIABLE EQUAL 0)
    message(FATAL_ERROR "Could NOT extract MOSEK from the archive")
  endif()

  if(NOT EXISTS "${MOSEK_PLATFORM_DIR}")
    message(FATAL_ERROR
      "Could NOT extract MOSEK platform directory from the archive"
    )
  endif()
endif()

if(NOT EXISTS "$ENV{HOME}/mosek/mosek.lic")
  message(STATUS
    "Could NOT find MOSEK license file. Please install your MOSEK license to \$HOME/mosek/mosek.lic."
  )
endif()


#if(MOSEK_PLATFORM MATCHES "^win")
#  set(IOMP5_LIBRARY libiomp5md)
#else()
#  set(IOMP5_LIBRARY iomp5)
#endif()

#set(IOMP5_LIBRARY_FILE
#  "${CMAKE_SHARED_LIBRARY_PREFIX}${IOMP5_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX}"
#)

if(MOSEK_PLATFORM MATCHES "32x86$")
  set(MOSEK_LIBRARY mosek)
  # set(MOSEKGLB_LIBRARY mosekglb)
else()
  set(MOSEK_LIBRARY mosek64)
  # set(MOSEKGLB_LIBRARY mosekglb64)
endif()

set(MOSEK_LIBRARY_DIR ${CMAKE_INSTALL_LIBDIR})

function(mosek_change_dylib_id_name name)
  execute_process(
    COMMAND
      "${CMAKE_INSTALL_NAME_TOOL}" -id "${CMAKE_INSTALL_PREFIX}/${MOSEK_LIBRARY_DIR}/${name}" "${MOSEK_PLATFORM_DIR}/bin/${name}"
      RESULT_VARIABLE MOSEK_INSTALL_NAME_TOOL_RESULT_VARIABLE
  )

  if(NOT MOSEK_INSTALL_NAME_TOOL_RESULT_VARIABLE EQUAL 0)
    message(FATAL_ERROR
      "Could NOT change ${name} dynamic shared library identification name"
    )
  endif()
endfunction()

set(MOSEK_ARCHIVE_FILES)
set(MOSEK_LIBRARY_FILES)
set(MOSEK_RUNTIME_FILES)

if(MOSEK_PLATFORM MATCHES "^win")
#  set(MOSEK_RUNTIME_FILES
#    "${MOSEK_PLATFORM_DIR}/bin/${IOMP5_LIBRARY_FILE}"
#  )

  if(MOSEK_PLATFORM STREQUAL "win32x86")
    set(MOSEK_ARCHIVE_FILES
      "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_STATIC_LIBRARY_PREFIX}${MOSEK_LIBRARY}_${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}${CMAKE_STATIC_LIBRARY_SUFFIX}"
    )

    list(APPEND MOSEK_RUNTIME_FILES
      "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEK_LIBRARY}_${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}"
      # "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEKGLB_LIBRARY}_${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}"
    )
  else()
    set(MOSEK_ARCHIVE_FILES
      "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_STATIC_LIBRARY_PREFIX}${MOSEK_LIBRARY}_${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}${CMAKE_STATIC_LIBRARY_SUFFIX}"
    )

    list(APPEND MOSEK_RUNTIME_FILES
      "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEK_LIBRARY}_${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}"
      # "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEKGLB_LIBRARY}_${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}"
    )
  endif()
else()
  set(MOSEK_LIBRARY_FILES
#    "${MOSEK_PLATFORM_DIR}/bin/${IOMP5_LIBRARY_FILE}"
    "${MOSEK_PLATFORM_DIR}/bin/${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEK_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX}"
  )

  if(MOSEK_PLATFORM STREQUAL "osx64x86")
    set(MOSEK_LIBRARY_FILE
      "${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEK_LIBRARY}.${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}"
    )
#    set(MOSEKGLB_LIBRARY_FILE
#      "${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEKGLB_LIBRARY}.${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX}"
#    )


#    mosek_change_dylib_id_name(${IOMP5_LIBRARY_FILE})
    mosek_change_dylib_id_name(${MOSEK_LIBRARY_FILE})
#    mosek_change_dylib_id_name(${MOSEKGLB_LIBRARY_FILE})

  else()
    set(MOSEK_LIBRARY_FILE
      "${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEK_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX}.${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}"
    )
#    set(MOSEKGLB_LIBRARY_FILE
#      "${CMAKE_SHARED_LIBRARY_PREFIX}${MOSEKGLB_LIBRARY}${CMAKE_SHARED_LIBRARY_SUFFIX}.${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}"
#    )
  endif()

  list(APPEND MOSEK_LIBRARY_FILES
    "${MOSEK_PLATFORM_DIR}/bin/${MOSEK_LIBRARY_FILE}"
#    "${MOSEK_PLATFORM_DIR}/bin/${MOSEKGLB_LIBRARY_FILE}"
  )
endif()

if(MOSEK_PLATFORM MATCHES "^win")
  set(LIBM_LIBRARY)
else()
  find_library(LIBM_LIBRARY NAMES m)

  if(NOT LIBM_LIBRARY)
    message(FATAL_ERROR "LibM NOT found")
  endif()
endif()

set(MOSEK_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})

install(FILES "${MOSEK_PLATFORM_DIR}/h/mosek.h"
  DESTINATION ${MOSEK_INCLUDE_DIR}
)

set(MOSEK_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})

configure_package_config_file(
  mosek-c-targets.cmake.in mosek-c-targets-install.cmake
  INSTALL_DESTINATION ${MOSEK_DIR}
  PATH_VARS MOSEK_INCLUDE_DIR MOSEK_LIBRARY_DIR
  NO_CHECK_REQUIRED_COMPONENTS_MACRO
  NO_SET_AND_CHECK_MACRO
)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/mosek-c-targets-install.cmake"
  DESTINATION ${MOSEK_DIR}
  RENAME mosek-c-targets.cmake
)

find_package(PkgConfig MODULE QUIET)

if(PkgConfig_FOUND)
  find_package(Threads MODULE REQUIRED)

  configure_file(mosek.pc.in mosek.pc @ONLY)

  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/mosek.pc"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif()



install(FILES ${MOSEK_ARCHIVE_FILES} ${MOSEK_LIBRARY_FILES}
  DESTINATION ${MOSEK_LIBRARY_DIR}
)

if(MOSEK_RUNTIME_FILES)
  install(PROGRAMS ${MOSEK_RUNTIME_FILES} DESTINATION ${CMAKE_INSTALL_BINDIR})
endif()


configure_package_config_file(mosek-config.cmake.in mosek-config.cmake
  INSTALL_DESTINATION ${MOSEK_DIR}
  PATH_VARS MOSEK_INCLUDE_DIR MOSEK_LIBRARY_DIR
  NO_CHECK_REQUIRED_COMPONENTS_MACRO
)

write_basic_package_version_file(mosek-config-version.cmake
  COMPATIBILITY SameMajorVersion
)
message('mosek_dir ${MOSEK_DIR}')
install(FILES
  "${CMAKE_CURRENT_BINARY_DIR}/mosek-config.cmake"
  "${CMAKE_CURRENT_BINARY_DIR}/mosek-config-version.cmake"
  DESTINATION ${MOSEK_DIR}
)

add_subdirectory(test)
